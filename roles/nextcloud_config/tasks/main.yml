---

- name: generate admin passwd if nextcloud_passwd is empty
  set_fact:
    nextcloud_passwd: "{{ lookup('password', '{{ nextcloud_credential_store }}/nextcloud_admin_secret chars=ascii_letters,digits length=32') }}"
  when: nextcloud_passwd == ''

- name: first setup nextcloud
  shell: >
    docker exec --user www-data nextcloud php occ  maintenance:install 
    --database {{ nextcloud_db_type }} --database-host nextcloud-db --database-name {{ nextcloud_db_name }} 
    --database-table-prefix {{ nextcloud_db_prefix }} --database-user {{ nextcloud_db_user }} --database-pass {{ nextcloud_db_passwd }} 
    --admin-user {{ nextcloud_admin }} --admin-pass {{ nextcloud_passwd }} --data-dir {{ nextcloud_container_data_dir }}
  when: ( not config_php.stat.exists )
  register: first_setup_nextcloud

- name: configure nextcloud 
  block:
  - name: set nextcloud system config.php values
    shell: '{{ docker_occ_cmd }} config:system:set {{ item }}'
    loop:  '{{ nextccloud_system_config }}'

  - name: set nextcloud mail config.php values
    shell: '{{ docker_occ_cmd }} config:system:set {{ item }}'
    loop:  '{{ nextccloud_mail_config }}'
    when: 
      - nextcloud_configure_mail|bool 

  - name: install {{ item.name }} app
    shell: '{{ docker_occ_cmd }} app:install {{ item.name }}'
    args:
      creates: '{{ nextcloud_www_dir }}/apps/{{ item.name }}'
    loop:  '{{ nextcloud_app_config }}'
    
  - name: '{{ item.state }} {{ item.name }} app'
    shell: '{{ docker_occ_cmd }} app:{{ item.state }} {{ item.name }}'
    loop:  '{{ nextcloud_app_config }}'

  - name: backup jobs, upgrade apps and database tuning
    shell: '{{ docker_occ_cmd }} {{ item }}'
    loop:
      - background:cron
      - upgrade
      - db:add-missing-indices
      - db:convert-filecache-bigint
  when: ( first_setup_nextcloud is changed ) or ( force_nextcloud_config|default(false) )

- name: create optimize batch job
  copy:
    dest: /usr/local/bin/nextcloud_optimize.sh
    owner: root
    group: root
    mode: 0755
    content: |
      #!/bin/bash
      docker exec redis redis-cli -a {{ lookup('password', '{{ nextcloud_credential_store }}/redis_secret chars=ascii_letters,digits length=32') }} FLUSHALL
      docker exec --user www-data nextcloud php occ files:scan --all
      docker exec --user www-data nextcloud php occ files:scan-app-data
      exit 0
      
- name: optimize nextcloud cronjob
  cron:
    name: nextcloud optimize
    minute: '15'
    hour:   '01'
    user: root
    job: "/usr/local/bin/nextcloud_optimize.sh > /dev/null 2>&1"

- name: nextcloud cronjob
  cron:
    name: nextcloud cronjob
    minute: '*/15'
    user: root
    job: "docker exec --user www-data nextcloud php -f cron.php > /dev/null 2>&1"

- name: run nextcloud cronjob once
  shell: 'docker exec --user www-data nextcloud php -f cron.php > /dev/null 2>&1'

- name: setup collabora app in nextcloud
  include_tasks: configure_collabora.yml
  when: 
    - online_office == 'collabora'
    - ansible_architecture == 'x86_64'

- name: setup onlyoffice app in nextcloud
  include_tasks: configure_onlyoffice.yml
  when: 
    - online_office == 'onlyoffice'
    - ansible_architecture == 'x86_64'

- name: setup talk app in nextcloud
  include_tasks: talk.yml
  when: 
    - talk_install|bool
    - ansible_architecture == 'x86_64'
