---
# tasks file for docker_mysql

- name: generate admin passwd if nextcloud_db_passwd is empty
  set_fact:
    nextcloud_db_passwd: "{{ lookup('password', '{{ nextcloud_credential_store }}/database_user_secret chars=ascii_letters,digits length=32') }}"
  when: nextcloud_db_passwd == ''

- name: create data dump directory
  file:
    name: '{{ nextcloud_database_dump_dir }}'
    owner: root
    group: root
    mode: 0700
    state: directory

- name: 'create data volume'
  docker_volume:
    name: 'nextcloud-database-vol'
    state: present

- name: mysql container
  block:
    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} mysql container"
      docker_container:
        name: nextcloud-db
        image: mariadb:{{ docker_mysql_image | default('latest') }}
        restart_policy: always
        user: mysql:mysql
        tty: yes
        env:
            MYSQL_DATABASE:      "{{ nextcloud_db_name  }}"
            MYSQL_USER:          "{{ nextcloud_db_user }}"
            MYSQL_PASSWORD:      "{{ nextcloud_db_passwd }}"
            MYSQL_ROOT_PASSWORD: "{{ lookup('password', '{{ nextcloud_credential_store }}/mysql_root_secret chars=ascii_letters,digits length=32') }}"
        volumes: 
          - 'nextcloud-database-vol:/var/lib/mysql'
        networks:
          - name: backend
        networks_cli_compatible: true
        labels:
          com.centurylinklabs.watchtower.enable:         "true"
        state: "{{ state | default('started') }}"
  when: nextcloud_db_type == 'mysql'

- name: postgres container
  block: 
    - name: "{{ 'Create' if (state is undefined or 'absent' not in state) else 'Terminate' }} postgres container"
      docker_container:
        name: nextcloud-db
        image: postgres:{{ docker_postgres_image | default('latest') }}
        restart_policy: always
        user: postgres:postgres
        tty: yes
        env:
            POSTGRES_DB:       "default"
            POSTGRES_USER:     "{{ nextcloud_db_user }}"
            POSTGRES_PASSWORD: "{{ nextcloud_db_passwd }}"
            PGDATA:            /var/lib/postgresql/data
        volumes: 
          - "nextcloud-database-vol:/var/lib/postgresql/data:rw"
        networks:
          - name: backend
        networks_cli_compatible: true
        labels:
          com.centurylinklabs.watchtower.enable:         "true"
        state: "{{ state | default('started') }}"
  when: nextcloud_db_type == 'pgsql'
  
- name: get nextcloud-db IP address
  command: "docker inspect --format '{''{ .NetworkSettings.Networks.backend.IPAddress }''}' nextcloud-db"
  register: nextcloud_db_ip_address
  
- name: wait for nextcloud-db to become ready
  wait_for:
    host: "{{ nextcloud_db_ip_address.stdout }}"
    port: "{{ '3306' if (nextcloud_db_type == 'mysql') else '5432' }}"
    state: started
    delay: 5
    connect_timeout: 15
    timeout: 600
